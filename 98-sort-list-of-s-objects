public List<Account> getAccounts(List<Account> accounts) {
    // code here
    return accounts.sort();
}
// write extra class here 
public class AccountWrapper implements Comparable {
    public Account a;

    public AccountWrapper(Account acc){
        if(acc == null){
            Exception ex = new NullPointerException();
            ex.setMessage('Account argument cannot be null'); 
    		throw ex;
        }
    }
    public Integer compareTo(Object compareTo){
        AccountWrapper compareToAcc = (AccountWrapper)compareToAcc;
        Integer returnValue = 0;
        if ((a.Amount == null) && (compareToAcc.a.Amount == null)) {
            // both wrappers have null Amounts
            returnValue = 0;
        } else if ((a.Amount == null) && (compareToAcc.a.Amount != null)){
            // nulls-first implementation
            returnValue = -1;
        } else if ((a.Amount != null) && (compareToAcc.a.Amount == null)){
            // nulls-first implementation
            returnValue = 1;
        } else if (a.Amount > compareToAcc.a.Amount) {
            // Set return value to a positive value.
            returnValue = 1;
        } else if (a.Amount < compareToAcc.a.Amount) {
            // Set return value to a negative value.
            returnValue = -1;
        } 
        return returnValue;
    }
}
